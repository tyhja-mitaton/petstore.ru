swagger: "2.0"
info:
  description: "This is a sample server Petstore server."
  version: "1.0.0"
  title: "Swagger Petstore"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.ru"
basePath: "/api/v1"
tags:
- name: "pet"
  description: "Everything about your Pets"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "category"
  description: "Operations about Petstore categories"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /pets:
    post:
      tags:
      - "pet"
      summary: "Add a new pet to the store"
      description: ""
      operationId: "pets"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Pet"
      responses:
        405:
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    
    get:
      tags:
      - "pet"
      summary: "Displays all pets"
      description: ""
      operationId: "pets/{petId}"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Pet"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
        405:
          description: "Validation exception"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /pets/{petId}:
    get:
      tags:
      - "pet"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "getPetById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - api_key: []
    put:
      tags:
      - "pet"
      summary: "Updates a pet in the store with form data"
      description: ""
      operationId: "updatePetWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the pet"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the pet"
        required: false
        type: "string"
      responses:
        405:
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "pet"
      summary: "Deletes a pet"
      description: ""
      operationId: "deletePet"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "petId"
        in: "path"
        description: "Pet id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /pets/{petId}/upload:
    post:
      tags:
      - "pet"
      summary: "uploads an image"
      description: ""
      operationId: "upload"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /pets/search:
    post:
      tags:
      - "pet"
      summary: "filters pets list"
      description: ""
      operationId: "search"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "price"
        in: "formData"
        description: "maximal price"
        required: false
        type: "integer"
        format: "int64"
      - name: "breed"
        in: "formData"
        description: "pet's breed"
        required: false
        type: "string"
      - name: "category"
        in: "formData"
        description: "category id"
        required: false
        type: "integer"
        format: "int64"
      - name: "status"
        in: "formData"
        description: "current status"
        required: false
        type: "boolean"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /categories:
    get:
      tags:
      - "category"
      summary: "Displays the list of categories"
      description: "Returns a map of status codes to quantities"
      operationId: "getCategories"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
    post:
      tags:
      - "category"
      summary: "Creates new category"
      description: "Returns a map of status codes to quantities"
      operationId: "createCategory"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Created category object"
        required: true
        schema:
          $ref: "#/definitions/Category"
      responses:
        default:
          description: "successful operation"
          schema:
            type: "object"
  /categories/{categoryId}:
    get:
      tags:
      - "category"
      summary: "Displays category by id"
      description: "Returns a category object"
      operationId: "getCategory"
      produces:
      - "application/json"
      parameters:
      - name: "categoryId"
        in: "path"
        description: "The id that needs to be fetched."
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Category"
        400:
          description: "Invalid userId supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "category"
      summary: "Updates category by id"
      description: "Updates a category object"
      operationId: "updateCategory"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "categoryId"
        in: "path"
        description: "id that need to be updated"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Updated category object"
        required: true
        schema:
          $ref: "#/definitions/Category"
      responses:
        400:
          description: "Invalid category id supplied"
        404:
          description: "Category not found"
    delete:
      tags:
      - "category"
      summary: "Deletes category by id"
      description: "Deletes a category object"
      operationId: "deleteCategory"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "categoryId"
        in: "path"
        description: "The id that needs to be deleted"
        required: true
        type: "integer"
      responses:
        400:
          description: "Invalid categoryId supplied"
        404:
          description: "Category not found"
  /users:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
          schema:
            type: "object"
    get:
      tags:
      - "user"
      summary: "Displays users list"
      operationId: "usersList"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "users list"
        required: false
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /users/login:
    post:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /users/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /users/{userId}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The id that needs to be fetched."
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid userId supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "id that need to be updated"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user id supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The id that needs to be deleted"
        required: true
        type: "integer"
      responses:
        400:
          description: "Invalid userId supplied"
        404:
          description: "User not found"
  /users/{userId}/ban:
    get:
      tags:
      - "user"
      summary: "Bans user"
      description: "This can only be done by admin."
      operationId: "banUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "id that need to be banned"
        required: true
        type: "integer"
      responses:
        400:
          description: "Invalid user id supplied"
        404:
          description: "User not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Category:
    type: "object"
    required:
    - "title"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    required: 
    - "login"
    - "email"
    - "password"
    properties:
      id:
        type: "integer"
        format: "int64"
      full_name:
        type: "string"
      login:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      access_token:
        type: "string"
      auth_key:
        type: "string"
      phone:
        type: "string"
    xml:
      name: "User"
  Pet:
    type: "object"
    required:
    - "nickname"
    properties:
      id:
        type: "integer"
        format: "int64"
      category_id:
        $ref: "#/definitions/Category"
      nickname:
        type: "string"
        example: "doggie"
      breed:
        type: "string"
      commentary:
        type: "string"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "sold"
      price:
        type: "integer"
        format: "int64"
      user_id:
        $ref: "#/definitions/User"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"